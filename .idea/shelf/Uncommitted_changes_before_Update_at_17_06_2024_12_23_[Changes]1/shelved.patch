Index: src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.dao;\r\n\r\nimport jm.task.core.jdbc.model.User;\r\nimport jm.task.core.jdbc.util.Util;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UserDaoJDBCImpl extends Util implements UserDao {\r\n\r\n    public UserDaoJDBCImpl() {\r\n\r\n    }\r\n\r\n    public void createUsersTable() {\r\n        try (Connection connection = getConnection();\r\n             Statement statement = connection.createStatement()) {\r\n            statement.execute(\"CREATE TABLE IF NOT EXISTS users_table (Id INT AUTO_INCREMENT PRIMARY KEY, Name VARCHAR(20), LastName VARCHAR(20), Age INT)\");\r\n            System.out.println(\"createUsersTable() OK\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"createUsersTable() ERROR\");\r\n        }\r\n    }\r\n\r\n    public void dropUsersTable() {\r\n        try (Connection connection = getConnection();\r\n             Statement statement = connection.createStatement()) {\r\n            statement.execute(\"DROP TABLE IF EXISTS users_table\");\r\n            System.out.println(\"dropUsersTable() OK\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"dropUsersTable() ERROR\");\r\n        }\r\n    }\r\n\r\n    public void saveUser(String name, String lastName, byte age) {\r\n        try (Connection connection = getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement\r\n                     (\"INSERT users_table (Name, LastName, Age) VALUES (?, ?, ?)\")) {\r\n            preparedStatement.setString(1, name);\r\n            preparedStatement.setString(2, lastName);\r\n            preparedStatement.setInt(3, age);\r\n            preparedStatement.execute();\r\n            System.out.println(String.format(\"User с именем — %s добавлен в базу данных\", name));\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"saveUser() ERROR\");\r\n        }\r\n    }\r\n\r\n    public void removeUserById(long id) {\r\n        try (Connection connection = getConnection();\r\n             PreparedStatement preparedStatement = connection.prepareStatement\r\n                     (\"DELETE FROM users_table WHERE ID = ?\")) {\r\n            preparedStatement.setInt(1, Math.toIntExact(id));\r\n            preparedStatement.execute();\r\n            System.out.println(\"removeUserById() OK\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"removeUserById() ERROR\");\r\n        }\r\n    }\r\n\r\n    public List<User> getAllUsers() {\r\n        List<User> userList = new ArrayList<>();\r\n        try (Connection connection = getConnection();\r\n             Statement statement = connection.createStatement()) {\r\n            ResultSet resultSet = statement.executeQuery(\"SELECT * FROM users_table\");\r\n            while (resultSet.next()) {\r\n                User user = new User();\r\n                user.setId(resultSet.getLong(\"ID\"));\r\n                user.setName(resultSet.getString(\"Name\"));\r\n                user.setLastName(resultSet.getString(\"LastName\"));\r\n                user.setAge(resultSet.getByte(\"Age\"));\r\n                userList.add(user);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"getAllUsers() ERROR\");\r\n        }\r\n        return userList;\r\n    }\r\n\r\n    public void cleanUsersTable() {\r\n        try (Connection connection = getConnection();\r\n             Statement statement = connection.createStatement()) {\r\n            statement.execute(\"DELETE FROM users_table\");\r\n            System.out.println(\"cleanUsersTable() OK\");\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"cleanUsersTable() ERROR\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java b/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
--- a/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
+++ b/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
@@ -13,6 +13,7 @@
 
     }
 
+
     public void createUsersTable() {
         try (Connection connection = getConnection();
              Statement statement = connection.createStatement()) {
